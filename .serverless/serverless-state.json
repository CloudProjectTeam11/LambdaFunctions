{
  "service": {
    "service": "cloud-computing-project",
    "serviceObject": {
      "name": "cloud-computing-project"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.8",
      "stage": "dev",
      "region": "eu-central-1",
      "memorySize": 128,
      "timeout": 10,
      "environment": {
        "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
        "USER_FILES_METADATA_TABLE": {
          "Ref": "userFilesMetadataTable"
        },
        "USERS_TABLE": {
          "Ref": "usersTable"
        },
        "ALBUMS_TABLE": {
          "Ref": "albumsTable"
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:DescribeTable",
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "userFilesMetadataTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "albumsTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "usersTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "usersTable",
                          "Arn"
                        ]
                      },
                      "/index/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:PutBucketNotification",
                "s3:DeleteObject"
              ],
              "Resource": "arn:aws:s3:::user-files-bucket-with-unique-name/*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "DefaultAuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-defaultAuthorizer"
            }
          },
          "RegisterUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-registerUser"
            }
          },
          "LoginUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-loginUser"
            }
          },
          "UploadFileToS3LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-uploadFileToS3"
            }
          },
          "UpdateFileMetadataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-updateFileMetadata"
            }
          },
          "GetUserFilesMetadataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-getUserFilesMetadata"
            }
          },
          "GetAlbumsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-getAlbums"
            }
          },
          "GetSharedAlbumsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-getSharedAlbums"
            }
          },
          "DeleteFileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-deleteFile"
            }
          },
          "CreateAlbumLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-createAlbum"
            }
          },
          "ShareAlbumLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-shareAlbum"
            }
          },
          "DeleteAlbumLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-deleteAlbum"
            }
          },
          "RevokeAlbumAccessLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-revokeAlbumAccess"
            }
          },
          "OnS3BucketInsertLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-computing-project-dev-onS3BucketInsert"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "cloud-computing-project",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-computing-project-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-computing-project-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "cloud-computing-project",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "DefaultAuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/defaultAuthorizer.zip"
              },
              "Handler": "functions/DefaultAuthorizer/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-defaultAuthorizer",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DefaultAuthorizerLogGroup"
            ]
          },
          "RegisterUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/registerUser.zip"
              },
              "Handler": "functions/RegisterUser/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-registerUser",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterUserLogGroup"
            ]
          },
          "LoginUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/loginUser.zip"
              },
              "Handler": "functions/LoginUser/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-loginUser",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginUserLogGroup"
            ]
          },
          "UploadFileToS3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/uploadFileToS3.zip"
              },
              "Handler": "functions/UploadFileToS3Bucket/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "cloud-computing-project-dev-uploadFileToS3",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadFileToS3LogGroup"
            ]
          },
          "UpdateFileMetadataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/updateFileMetadata.zip"
              },
              "Handler": "functions/UpdateFileMetadata/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-updateFileMetadata",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateFileMetadataLogGroup"
            ]
          },
          "GetUserFilesMetadataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/getUserFilesMetadata.zip"
              },
              "Handler": "functions/GetUserFilesMetadata/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-getUserFilesMetadata",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserFilesMetadataLogGroup"
            ]
          },
          "GetAlbumsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/getAlbums.zip"
              },
              "Handler": "functions/GetAlbums/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-getAlbums",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAlbumsLogGroup"
            ]
          },
          "GetSharedAlbumsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/getSharedAlbums.zip"
              },
              "Handler": "functions/GetSharedAlbums/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-getSharedAlbums",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSharedAlbumsLogGroup"
            ]
          },
          "DeleteFileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/deleteFile.zip"
              },
              "Handler": "functions/DeleteFile/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-deleteFile",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteFileLogGroup"
            ]
          },
          "CreateAlbumLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/createAlbum.zip"
              },
              "Handler": "functions/CreateAlbum/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-createAlbum",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateAlbumLogGroup"
            ]
          },
          "ShareAlbumLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/shareAlbum.zip"
              },
              "Handler": "functions/ShareAlbum/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-shareAlbum",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ShareAlbumLogGroup"
            ]
          },
          "DeleteAlbumLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/deleteAlbum.zip"
              },
              "Handler": "functions/DeleteAlbum/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-deleteAlbum",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteAlbumLogGroup"
            ]
          },
          "RevokeAlbumAccessLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/revokeAlbumAccess.zip"
              },
              "Handler": "functions/RevokeAlbumAccess/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-revokeAlbumAccess",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RevokeAlbumAccessLogGroup"
            ]
          },
          "OnS3BucketInsertLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z/onS3BucketInsert.zip"
              },
              "Handler": "functions/OnS3BucketInsert/lambda_function.lambda_handler",
              "Runtime": "python3.8",
              "FunctionName": "cloud-computing-project-dev-onS3BucketInsert",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_FILES_BUCKET": "user-files-bucket-with-unique-name",
                  "USER_FILES_METADATA_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_FILES_METADATA_TABLE\"]"
                  },
                  "USERS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USERS_TABLE\"]"
                  },
                  "ALBUMS_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"ALBUMS_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "OnS3BucketInsertLogGroup"
            ]
          },
          "DefaultAuthorizerLambdaVersion9P9JnuCcR8TaloNCu1Bs9KcmtI57gm3darYg3DuAQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DefaultAuthorizerLambdaFunction"
              },
              "CodeSha256": "DLahKlrykdIeafZ4B8enEPXNHUmj6G7zoIXJ4DpG8W0="
            }
          },
          "RegisterUserLambdaVersionCv41ZtuMjhbhAP8n5Ew7GbcOiNli3gGNnnlZPAPyPuI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterUserLambdaFunction"
              },
              "CodeSha256": "n+qJIzi6F0uORwJPkt5PBqAZJvw3ZWxI2y4z5tNzTi8="
            }
          },
          "UpdateFileMetadataLambdaVersionWHp92Lh2P2EmwtO4zwA7nEFhRWIoFcrKXBp04d5ri8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateFileMetadataLambdaFunction"
              },
              "CodeSha256": "yjJpE6pPqNrgUmzjqtljljlq0jb5VQ7YPxxhUEJYL9A="
            }
          },
          "LoginUserLambdaVersioncaMEysF0GL3PkaH5ilFROCi5uZ03xQjrfGgmWilQBvg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginUserLambdaFunction"
              },
              "CodeSha256": "PbyY5kPSNgN4+NiLVWPLSlg1eQalYMQoNYaWyVcFy+s="
            }
          },
          "GetUserFilesMetadataLambdaVersionBLIMmmfbhO4rVJDFXYLYkUbQOWZSr9nfwJ07o000": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserFilesMetadataLambdaFunction"
              },
              "CodeSha256": "ppksl5NIEy/e06j6rFgFja6kdDmFZzbqB3gdIq8VA94="
            }
          },
          "GetAlbumsLambdaVersionsIQktlUyDg1TuFPjtSLLSiwOUDaOOBlR3TuiPslyY0Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAlbumsLambdaFunction"
              },
              "CodeSha256": "U7zTK6PEOBZh/XfF33Jb9CfvbORnz3D2N/TdpO8Hsk4="
            }
          },
          "DeleteFileLambdaVersionVtOTvvTPWOnkdmZdzkxDfSWtf8GkEIN0XjBy7STA90": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteFileLambdaFunction"
              },
              "CodeSha256": "nU7/jdc1k5JuVwNdpqJNYmwUDpxGwdrFcb44iK7zRd0="
            }
          },
          "CreateAlbumLambdaVersion8ptJzCyaXsLzW8sY84PBgflrlVndaqbsCOegyW49a5M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateAlbumLambdaFunction"
              },
              "CodeSha256": "8R6d6SxbSKYWxwRzuTBcPCqwujntVhS/VOqk250piwk="
            }
          },
          "GetSharedAlbumsLambdaVersionA9sIQBJ9qNdyk475wudBGorWJ3HrTsuUFMSzLq9zlA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSharedAlbumsLambdaFunction"
              },
              "CodeSha256": "6JcKVnYkeeaEVknxfF6w5sZ9H9nlOanfnzVfyrVJ4D4="
            }
          },
          "ShareAlbumLambdaVersionhnqXWUSZnZZz3bEBoOglRxs6SOhTvhfNZ4P3duTq1M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ShareAlbumLambdaFunction"
              },
              "CodeSha256": "1/RkIgi2f9J4B2PRYFE2VS017ukaBugkPRsF36TNJH0="
            }
          },
          "DeleteAlbumLambdaVersionOX67FRVxNXXnqOXx9PnFhww58cu73ikU4o7w6blDe4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteAlbumLambdaFunction"
              },
              "CodeSha256": "4wVoWLmgqKzXgRPe7FktF68HJqHFtuR0T3VZbQhL9aQ="
            }
          },
          "RevokeAlbumAccessLambdaVersionVXzqQZnT9QFxoTmwb22qEVllU85R7s7IQ6btJIhQ9Xw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RevokeAlbumAccessLambdaFunction"
              },
              "CodeSha256": "x77PqHVLE4M1ijbIqy2Kb7gsrzkiLnRis9Vh+OgYg/Y="
            }
          },
          "OnS3BucketInsertLambdaVersionRN2Ssec7XerA6SLg29AXFrd9a1Fda31AwY6e50gQA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnS3BucketInsertLambdaFunction"
              },
              "CodeSha256": "CAqYcTGo3mNC6j9zbHY1AXlF0J9cwxUoENF50U2VrjY="
            }
          },
          "UploadFileToS3LambdaVersionNKlQxVukPEn6RpWIrkiR3uiOQiSGK70UUQliX3jQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadFileToS3LambdaFunction"
              },
              "CodeSha256": "07DAW0C0wabfxaI+oCkiwFgFa2xavm1LysQxlCROYu8="
            }
          },
          "S3BucketUserfilesbucketwithuniquename": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "user-files-bucket-with-unique-name",
              "NotificationConfiguration": {
                "LambdaConfigurations": [
                  {
                    "Event": "s3:ObjectCreated:Put",
                    "Function": {
                      "Fn::GetAtt": [
                        "OnS3BucketInsertLambdaFunction",
                        "Arn"
                      ]
                    }
                  },
                  {
                    "Event": "s3:ObjectCreated:Post",
                    "Function": {
                      "Fn::GetAtt": [
                        "OnS3BucketInsertLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "OnS3BucketInsertLambdaPermissionUserfilesbucketwithuniquenameS3",
              "OnS3BucketInsertLambdaPermissionUserfilesbucketwithuniquenameS3"
            ]
          },
          "OnS3BucketInsertLambdaPermissionUserfilesbucketwithuniquenameS3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnS3BucketInsertLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "s3.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::user-files-bucket-with-unique-name"
                  ]
                ]
              },
              "SourceAccount": {
                "Ref": "AWS::AccountId"
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-cloud-computing-project",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResources": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "resources",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesMetadata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "metadata",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesMetadataShared": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResourcesMetadata"
              },
              "PathPart": "shared",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlbum": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "album",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlbumShare": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAlbum"
              },
              "PathPart": "share",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlbumRevoke": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAlbum"
              },
              "PathPart": "revoke",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAlbumRevokeAccess": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAlbumRevoke"
              },
              "PathPart": "access",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserRegisterOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResourcesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResourcesMetadataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesMetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAlbumOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlbum"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResourcesMetadataSharedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesMetadataShared"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAlbumShareOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlbumShare"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAlbumRevokeAccessOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlbumRevokeAccess"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoginUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoginUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResourcesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UploadFileToS3LambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodResourcesMetadataPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesMetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateFileMetadataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodResourcesMetadataGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesMetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserFilesMetadataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAlbumGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlbum"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAlbumsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodResourcesMetadataSharedGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesMetadataShared"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSharedAlbumsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodResourcesDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteFileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAlbumPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlbum"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateAlbumLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAlbumSharePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlbumShare"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ShareAlbumLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAlbumDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlbum"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteAlbumLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAlbumRevokeAccessPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAlbumRevokeAccess"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "DefaultAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RevokeAlbumAccessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DefaultAuthorizerApiGatewayAuthorizer"
            ]
          },
          "DefaultAuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.authorizationToken",
              "Name": "defaultAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "DefaultAuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1687879338660": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUserRegisterOptions",
              "ApiGatewayMethodUserLoginOptions",
              "ApiGatewayMethodResourcesOptions",
              "ApiGatewayMethodResourcesMetadataOptions",
              "ApiGatewayMethodAlbumOptions",
              "ApiGatewayMethodResourcesMetadataSharedOptions",
              "ApiGatewayMethodAlbumShareOptions",
              "ApiGatewayMethodAlbumRevokeAccessOptions",
              "ApiGatewayMethodUserRegisterPost",
              "ApiGatewayMethodUserLoginPost",
              "ApiGatewayMethodResourcesPost",
              "ApiGatewayMethodResourcesMetadataPut",
              "ApiGatewayMethodResourcesMetadataGet",
              "ApiGatewayMethodAlbumGet",
              "ApiGatewayMethodResourcesMetadataSharedGet",
              "ApiGatewayMethodResourcesDelete",
              "ApiGatewayMethodAlbumPost",
              "ApiGatewayMethodAlbumSharePost",
              "ApiGatewayMethodAlbumDelete",
              "ApiGatewayMethodAlbumRevokeAccessPut"
            ]
          },
          "RegisterUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LoginUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UploadFileToS3LambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadFileToS3LambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DefaultAuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DefaultAuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateFileMetadataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateFileMetadataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserFilesMetadataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserFilesMetadataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAlbumsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAlbumsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSharedAlbumsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSharedAlbumsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteFileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteFileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateAlbumLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateAlbumLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ShareAlbumLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ShareAlbumLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteAlbumLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteAlbumLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RevokeAlbumAccessLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RevokeAlbumAccessLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "albumsTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Delete",
            "Properties": {
              "TableName": "Albums",
              "AttributeDefinitions": [
                {
                  "AttributeName": "album_id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "album_id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "userFilesMetadataTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Delete",
            "Properties": {
              "TableName": "UserFilesMetadata",
              "AttributeDefinitions": [
                {
                  "AttributeName": "file_id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "file_id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "usersTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Delete",
            "Properties": {
              "TableName": "Users02",
              "AttributeDefinitions": [
                {
                  "AttributeName": "username",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "username",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "EmailIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                }
              ]
            }
          },
          "Ons3bucketinsertLambdaPermissionUserfilesbucketwithuniquenameS3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnS3BucketInsertLambdaFunction",
                  "Arn"
                ]
              },
              "Principal": "s3.amazonaws.com",
              "Action": "lambda:InvokeFunction",
              "SourceAccount": {
                "Ref": "AWS::AccountId"
              },
              "SourceArn": "arn:aws:s3:::user-files-bucket-with-unique-name"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-ServerlessDeploymentBucketName"
            }
          },
          "DefaultAuthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DefaultAuthorizerLambdaVersion9P9JnuCcR8TaloNCu1Bs9KcmtI57gm3darYg3DuAQ"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-DefaultAuthorizerLambdaFunctionQualifiedArn"
            }
          },
          "RegisterUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterUserLambdaVersionCv41ZtuMjhbhAP8n5Ew7GbcOiNli3gGNnnlZPAPyPuI"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-RegisterUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateFileMetadataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateFileMetadataLambdaVersionWHp92Lh2P2EmwtO4zwA7nEFhRWIoFcrKXBp04d5ri8"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-UpdateFileMetadataLambdaFunctionQualifiedArn"
            }
          },
          "LoginUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginUserLambdaVersioncaMEysF0GL3PkaH5ilFROCi5uZ03xQjrfGgmWilQBvg"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-LoginUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserFilesMetadataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserFilesMetadataLambdaVersionBLIMmmfbhO4rVJDFXYLYkUbQOWZSr9nfwJ07o000"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-GetUserFilesMetadataLambdaFunctionQualifiedArn"
            }
          },
          "GetAlbumsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAlbumsLambdaVersionsIQktlUyDg1TuFPjtSLLSiwOUDaOOBlR3TuiPslyY0Q"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-GetAlbumsLambdaFunctionQualifiedArn"
            }
          },
          "DeleteFileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteFileLambdaVersionVtOTvvTPWOnkdmZdzkxDfSWtf8GkEIN0XjBy7STA90"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-DeleteFileLambdaFunctionQualifiedArn"
            }
          },
          "CreateAlbumLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateAlbumLambdaVersion8ptJzCyaXsLzW8sY84PBgflrlVndaqbsCOegyW49a5M"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-CreateAlbumLambdaFunctionQualifiedArn"
            }
          },
          "GetSharedAlbumsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSharedAlbumsLambdaVersionA9sIQBJ9qNdyk475wudBGorWJ3HrTsuUFMSzLq9zlA"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-GetSharedAlbumsLambdaFunctionQualifiedArn"
            }
          },
          "ShareAlbumLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ShareAlbumLambdaVersionhnqXWUSZnZZz3bEBoOglRxs6SOhTvhfNZ4P3duTq1M"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-ShareAlbumLambdaFunctionQualifiedArn"
            }
          },
          "DeleteAlbumLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteAlbumLambdaVersionOX67FRVxNXXnqOXx9PnFhww58cu73ikU4o7w6blDe4"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-DeleteAlbumLambdaFunctionQualifiedArn"
            }
          },
          "RevokeAlbumAccessLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RevokeAlbumAccessLambdaVersionVXzqQZnT9QFxoTmwb22qEVllU85R7s7IQ6btJIhQ9Xw"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-RevokeAlbumAccessLambdaFunctionQualifiedArn"
            }
          },
          "OnS3BucketInsertLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnS3BucketInsertLambdaVersionRN2Ssec7XerA6SLg29AXFrd9a1Fda31AwY6e50gQA"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-OnS3BucketInsertLambdaFunctionQualifiedArn"
            }
          },
          "UploadFileToS3LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadFileToS3LambdaVersionNKlQxVukPEn6RpWIrkiR3uiOQiSGK70UUQliX3jQ"
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-UploadFileToS3LambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-cloud-computing-project-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "defaultAuthorizer": {
        "handler": "functions/DefaultAuthorizer/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/DefaultAuthorizer/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\defaultAuthorizer.zip"
        },
        "events": [],
        "name": "cloud-computing-project-dev-defaultAuthorizer",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "DefaultAuthorizerLambdaVersion9P9JnuCcR8TaloNCu1Bs9KcmtI57gm3darYg3DuAQ"
      },
      "registerUser": {
        "handler": "functions/RegisterUser/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/RegisterUser/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\registerUser.zip"
        },
        "events": [
          {
            "http": {
              "path": "user/register",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-registerUser",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "RegisterUserLambdaVersionCv41ZtuMjhbhAP8n5Ew7GbcOiNli3gGNnnlZPAPyPuI"
      },
      "loginUser": {
        "handler": "functions/LoginUser/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/LoginUser/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\loginUser.zip"
        },
        "events": [
          {
            "http": {
              "path": "user/login",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-loginUser",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "LoginUserLambdaVersioncaMEysF0GL3PkaH5ilFROCi5uZ03xQjrfGgmWilQBvg"
      },
      "uploadFileToS3": {
        "runtime": "nodejs18.x",
        "handler": "functions/UploadFileToS3Bucket/index.handler",
        "package": {
          "patterns": [
            "functions/UploadFileToS3Bucket/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\uploadFileToS3.zip"
        },
        "events": [
          {
            "http": {
              "path": "resources",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-uploadFileToS3",
        "memory": 128,
        "timeout": 10,
        "vpc": {},
        "versionLogicalId": "UploadFileToS3LambdaVersionNKlQxVukPEn6RpWIrkiR3uiOQiSGK70UUQliX3jQ"
      },
      "updateFileMetadata": {
        "handler": "functions/UpdateFileMetadata/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/UpdateFileMetadata/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\updateFileMetadata.zip"
        },
        "events": [
          {
            "http": {
              "path": "resources/metadata",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-updateFileMetadata",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "UpdateFileMetadataLambdaVersionWHp92Lh2P2EmwtO4zwA7nEFhRWIoFcrKXBp04d5ri8"
      },
      "getUserFilesMetadata": {
        "handler": "functions/GetUserFilesMetadata/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/GetUserFilesMetadata/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\getUserFilesMetadata.zip"
        },
        "events": [
          {
            "http": {
              "path": "resources/metadata",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-getUserFilesMetadata",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "GetUserFilesMetadataLambdaVersionBLIMmmfbhO4rVJDFXYLYkUbQOWZSr9nfwJ07o000"
      },
      "getAlbums": {
        "handler": "functions/GetAlbums/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/GetAlbums/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\getAlbums.zip"
        },
        "events": [
          {
            "http": {
              "path": "album",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-getAlbums",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "GetAlbumsLambdaVersionsIQktlUyDg1TuFPjtSLLSiwOUDaOOBlR3TuiPslyY0Q"
      },
      "getSharedAlbums": {
        "handler": "functions/GetSharedAlbums/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/GetSharedAlbums/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\getSharedAlbums.zip"
        },
        "events": [
          {
            "http": {
              "path": "resources/metadata/shared",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-getSharedAlbums",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "GetSharedAlbumsLambdaVersionA9sIQBJ9qNdyk475wudBGorWJ3HrTsuUFMSzLq9zlA"
      },
      "deleteFile": {
        "handler": "functions/DeleteFile/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/DeleteFile/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\deleteFile.zip"
        },
        "events": [
          {
            "http": {
              "path": "resources",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-deleteFile",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "DeleteFileLambdaVersionVtOTvvTPWOnkdmZdzkxDfSWtf8GkEIN0XjBy7STA90"
      },
      "createAlbum": {
        "handler": "functions/CreateAlbum/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/CreateAlbum/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\createAlbum.zip"
        },
        "events": [
          {
            "http": {
              "path": "album",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-createAlbum",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "CreateAlbumLambdaVersion8ptJzCyaXsLzW8sY84PBgflrlVndaqbsCOegyW49a5M"
      },
      "shareAlbum": {
        "handler": "functions/ShareAlbum/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/ShareAlbum/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\shareAlbum.zip"
        },
        "events": [
          {
            "http": {
              "path": "album/share",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-shareAlbum",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "ShareAlbumLambdaVersionhnqXWUSZnZZz3bEBoOglRxs6SOhTvhfNZ4P3duTq1M"
      },
      "deleteAlbum": {
        "handler": "functions/DeleteAlbum/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/DeleteAlbum/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\deleteAlbum.zip"
        },
        "events": [
          {
            "http": {
              "path": "album",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-deleteAlbum",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "DeleteAlbumLambdaVersionOX67FRVxNXXnqOXx9PnFhww58cu73ikU4o7w6blDe4"
      },
      "revokeAlbumAccess": {
        "handler": "functions/RevokeAlbumAccess/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/RevokeAlbumAccess/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\revokeAlbumAccess.zip"
        },
        "events": [
          {
            "http": {
              "path": "album/revoke/access",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "defaultAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DefaultAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.authorizationToken",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-computing-project-dev-revokeAlbumAccess",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "RevokeAlbumAccessLambdaVersionVXzqQZnT9QFxoTmwb22qEVllU85R7s7IQ6btJIhQ9Xw"
      },
      "onS3BucketInsert": {
        "handler": "functions/OnS3BucketInsert/lambda_function.lambda_handler",
        "package": {
          "patterns": [
            "functions/OnS3BucketInsert/**"
          ],
          "artifact": "C:\\Users\\vlada\\Documents\\Fakultet\\6. Semestar\\Racunarstvo u oblaku\\Projekat\\LambdaFunctions\\.serverless\\onS3BucketInsert.zip"
        },
        "events": [
          {
            "s3": {
              "bucket": "user-files-bucket-with-unique-name",
              "event": "s3:ObjectCreated:Put"
            }
          },
          {
            "s3": {
              "bucket": "user-files-bucket-with-unique-name",
              "event": "s3:ObjectCreated:Post"
            }
          }
        ],
        "name": "cloud-computing-project-dev-onS3BucketInsert",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.8",
        "vpc": {},
        "versionLogicalId": "OnS3BucketInsertLambdaVersionRN2Ssec7XerA6SLg29AXFrd9a1Fda31AwY6e50gQA"
      }
    },
    "resources": {
      "Resources": {
        "albumsTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Delete",
          "Properties": {
            "TableName": "Albums",
            "AttributeDefinitions": [
              {
                "AttributeName": "album_id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "album_id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "userFilesMetadataTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Delete",
          "Properties": {
            "TableName": "UserFilesMetadata",
            "AttributeDefinitions": [
              {
                "AttributeName": "file_id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "file_id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "usersTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Delete",
          "Properties": {
            "TableName": "Users02",
            "AttributeDefinitions": [
              {
                "AttributeName": "username",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "username",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "EmailIndex",
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              }
            ]
          }
        },
        "S3BucketUserfilesbucketwithuniquename": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "user-files-bucket-with-unique-name"
          }
        },
        "Ons3bucketinsertLambdaPermissionUserfilesbucketwithuniquenameS3": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "OnS3BucketInsertLambdaFunction",
                "Arn"
              ]
            },
            "Principal": "s3.amazonaws.com",
            "Action": "lambda:InvokeFunction",
            "SourceAccount": {
              "Ref": "AWS::AccountId"
            },
            "SourceArn": "arn:aws:s3:::user-files-bucket-with-unique-name"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "cloud-computing-project",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!**/**"
        ],
        "artifactsS3KeyDirname": "serverless/cloud-computing-project/dev/code-artifacts",
        "artifactDirectoryName": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/cloud-computing-project/dev/1687879343448-2023-06-27T15:22:23.448Z",
    "artifact": ""
  }
}