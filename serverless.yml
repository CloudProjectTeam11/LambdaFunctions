# Service name
service: cloud-computing-project
# Serverless framework version
frameworkVersion: '3'

# Global configuration
provider:
  # Cloud provider name
  name: aws
  # Lambda function runtime enviroment
  runtime: python3.7
  # Deployment stage
  stage: dev
  # Deplotment region
  region: eu-central-1
  # Global memory configuration (default 1024MB)
  memorySize: 128
  # Function timeout in seconds (default 6s)
  timeout: 10

  environment:
    USER_FILES_BUCKET: user-files-bucket-with-unique-name'
    USER_FILES_METADATA_TABLE:
      Ref: userFilesMetadataTable
    USERS_TABLE:
      Ref: usersTable
    ALBUMS_TABLE:
      Ref: albumsTable
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [userFilesMetadataTable, Arn]
            - "Fn::GetAtt": [usersTable, Arn]
            -  "Fn::Join": 
                - ""
                - - "Fn::GetAtt": [usersTable, Arn]
                  - "/index/*"
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:PutBucketNotification
          Resource:
            - "arn:aws:s3:::user-files-bucket-with-unique-name/*"


package:
  individually: true
  patterns:
    - '!*/*'

# Lambda functions
functions:
  defaultAuthorizer:
    handler: functions/DefaultAuthorizer/lambda_function.lambda_handler
    package:
      patterns:
        - functions/DefaultAuthorizer/**
  registerUser:
    handler: functions/RegisterUser/lambda_function.lambda_handler
    package:
      patterns:
        - 'functions/RegisterUser/**'      
    events:
      - http:
          path: user/register
          method: post
          cors: true
  loginUser:
    handler: functions/LoginUser/lambda_function.lambda_handler
    package:
      patterns:
        - 'functions/LoginUser/**'
    events:
      - http:
          path: user/login
          method: post
          cors: true
  uploadFileToS3:
    handler: functions/UploadFileToS3Bucket/index.handler
    package:
      patterns:
        - 'functions/UploadFileToS3Bucket/**'
    events:
      - http:
          path: resources
          method: post
          cors: true
          authorizer:
            name: defaultAuthorizer
            resultTtlInSeconds: 300
  updateFileMetadata:
    handler: functions/UpdateFileMetadata/lambda_function.lambda_handler
    package:
      patterns:
        - 'functions/UpdateFileMetadata/**'
    events:
      - http:
          path: resources/metadata
          method: post
          cors: true
          authorizer:
            name: defaultAuthorizer
            resultTtlInSeconds: 300
  getUserFilesMetadata:
    handler: functions/GetUserFilesMetadata/lambda_function.lambda_handler
    package:
      patterns:
        - 'functions/GetUserFilesMetadata/**'
    events:
      - http:
          path: resources/metadata
          method: get
          cors: true
          authorizer:
            name: defaultAuthorizer
            resultTtlInSeconds: 300
  deleteFile:
    handler: functions/DeleteFile/lamda_function.lambda_handler
    package:
      patterns:
        - 'functions/DeleteFile/**'
    events:
      - http:
          path: resources
          method: delete
          cors: true
          authorizer:
            name: defaultAuthorizer
            resultTtlInSeconds: 300
  createAlbum:
    handler: functions/CreateAlbum/lamda_function.lambda_handler
    package:
      patterns:
        - 'functions/CreateAlbum/**'
    events:
      - http:
          path: album
          method: post
          cors: true
          authorizer:
            name: defaultAuthorizer
            resultTtlInSeconds: 300  
  shareAlbum:
    handler: functions/ShareAlbum/lamda_function.lambda_handler
    package:
      patterns:
        - 'functions/ShareAlbum/**'
    events:
      - http:
          path: album/share
          method: post
          cors: true
          authorizer:
            name: defaultAuthorizer
            resultTtlInSeconds: 300
  onS3BucketInsert:
    handler: functions/OnS3BucketInsert/lambda_function.lambda_handler
    package:
      patterns:
        - 'functions/OnS3BucketInsert/**'    
    events:
      - s3:
          bucket: user-files-bucket-with-unique-name
          event: s3:ObjectCreated:Put

resources:
  Resources:
    albumsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: Albums
        AttributeDefinitions:
          - AttributeName: album_id
            AttributeType: S
        KeySchema:
          - AttributeName: album_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    userFilesMetadataTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: UserFilesMetadata
        AttributeDefinitions:
          - AttributeName: file_id
            AttributeType: S
        KeySchema:
          - AttributeName: file_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    usersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      Properties:
        TableName: Users02
        AttributeDefinitions:
            - AttributeName: username
              AttributeType: S
            - AttributeName: email
              AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    S3BucketUserfilesbucketwithuniquename:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: user-files-bucket-with-unique-name
    Ons3bucketinsertLambdaPermissionUserfilesbucketwithuniquenameS3:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - OnS3BucketInsertLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::user-files-bucket-with-unique-name"